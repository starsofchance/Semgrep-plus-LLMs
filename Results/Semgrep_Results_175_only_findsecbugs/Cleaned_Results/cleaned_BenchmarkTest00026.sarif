{
  "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "invocations": [
        {
          "executionSuccessful": true,
          "toolExecutionNotifications": []
        }
      ],
      "results": [
        {
          "fingerprints": {
            "matchBasedId/v1": "2f34c19274be1cadb3d00247dacebd4659d857b809dc565cc7548ecc453b37838b2e228be51fd6eb99c9f94923f87848341951d4d9704980707afe172e09a1d8_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 67,
                  "endLine": 26,
                  "snippet": {
                    "text": "        String param = request.getParameter(\"BenchmarkTest00026\");"
                  },
                  "startColumn": 9,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "The Servlet can read GET and POST parameters from various methods. The value obtained should be\nconsidered unsafe. You may need to validate or sanitize those values before passing them to\nsensitive APIs\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "92ade7fbdf4493721ea67f57e5ed0da1395be458a038adfae3c512536bcecbb0c503b13986fc05ef61bd522f5c3c18688662d022f59059b58e88ca1875b389b7_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 88,
                  "endLine": 29,
                  "snippet": {
                    "text": "        String sql = \"SELECT  * from USERS where USERNAME='foo' and PASSWORD='\" + param + \"'\";"
                  },
                  "startColumn": 22,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.CUSTOM_INJECTION-2"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "92ade7fbdf4493721ea67f57e5ed0da1395be458a038adfae3c512536bcecbb0c503b13986fc05ef61bd522f5c3c18688662d022f59059b58e88ca1875b389b7_1"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 94,
                  "endLine": 29,
                  "snippet": {
                    "text": "        String sql = \"SELECT  * from USERS where USERNAME='foo' and PASSWORD='\" + param + \"'\";"
                  },
                  "startColumn": 22,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.CUSTOM_INJECTION-2"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "eab8605311c74d7614c5b733a613190df650334a8b4e3a4f3b67f64e7281e127300039f1026f62e9eda276d9dd8958e443d0cda6bc388864de82c090eb1ffdd0_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 94,
                  "endLine": 29,
                  "snippet": {
                    "text": "        String sql = \"SELECT  * from USERS where USERNAME='foo' and PASSWORD='\" + param + \"'\";"
                  },
                  "startColumn": 22,
                  "startLine": 29
                }
              }
            }
          ],
          "message": {
            "text": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "a13878c4b4790b7f470da8260959c96f4dcb885b02a89e6f8a03b078812bcc110dd3cd07077325abd76e21dfb1107e92755daa74718b37df1b395d6d975f6961_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 44,
                  "snippet": {
                    "text": "                                org.owasp\n                                                .esapi\n                                                .ESAPI\n                                                .encoder()\n                                                .encodeForHTML(results.getString(\"USERNAME\"))\n                                        + \" \");"
                  },
                  "startColumn": 33,
                  "startLine": 39
                }
              }
            }
          ],
          "message": {
            "text": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "2821c87ee6f7c7e5c5bfd2d0fa18d6a5148dfc223c50627b50602045c78c23bb8d49aa350893b5ad59d3778da77b7d13e4965762404b3c56e6a6f4ee554b1607_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00026.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 89,
                  "endLine": 51,
                  "snippet": {
                    "text": "                            \"No results returned for query: \"\n                                    + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql));"
                  },
                  "startColumn": 29,
                  "startLine": 50
                }
              }
            }
          ],
          "message": {
            "text": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n"
          },
          "properties": {},
          "ruleId": "gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1"
        }
      ],
      "tool": {
        "driver": {
          "name": "Semgrep OSS",
          "rules": [
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n"
              },
              "help": {
                "markdown": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_INJECTION-2)\n",
                "text": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n"
              },
              "helpUri": "https://semgrep.dev/r/gitlab.find_sec_bugs.CUSTOM_INJECTION-2",
              "id": "gitlab.find_sec_bugs.CUSTOM_INJECTION-2",
              "name": "gitlab.find_sec_bugs.CUSTOM_INJECTION-2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n"
              },
              "help": {
                "markdown": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1)\n",
                "text": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n"
              },
              "helpUri": "https://semgrep.dev/r/gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1",
              "id": "gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1",
              "name": "gitlab.find_sec_bugs.SERVLET_PARAMETER-1.SERVLET_CONTENT_TYPE-1.SERVLET_SERVER_NAME-1.SERVLET_SESSION_ID-1.SERVLET_QUERY_STRING-1.SERVLET_HEADER-1.SERVLET_HEADER_REFERER-1.SERVLET_HEADER_USER_AGENT-1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-20",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Input Validation"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "The Servlet can read GET and POST parameters from various methods. The value obtained should be\nconsidered unsafe. You may need to validate or sanitize those values before passing them to\nsensitive APIs\n"
              },
              "help": {
                "markdown": "The Servlet can read GET and POST parameters from various methods. The value obtained should be\nconsidered unsafe. You may need to validate or sanitize those values before passing them to\nsensitive APIs\n\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1)\n",
                "text": "The Servlet can read GET and POST parameters from various methods. The value obtained should be\nconsidered unsafe. You may need to validate or sanitize those values before passing them to\nsensitive APIs\n"
              },
              "helpUri": "https://semgrep.dev/r/gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1",
              "id": "gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1",
              "name": "gitlab.find_sec_bugs.XSS_SERVLET-2.XSS_SERVLET_PARAMETER-1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-20",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Improper Input Validation"
              }
            }
          ],
          "semanticVersion": "1.141.0"
        }
      }
    }
  ]
}