{
  "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "invocations": [
        {
          "executionSuccessful": true,
          "toolExecutionNotifications": []
        }
      ],
      "results": [
        {
          "fingerprints": {
            "matchBasedId/v1": "6a4bbe5972b7842da62c361388f45dc0f60a2c1464aa3acf30c53bd574ec820284d0dfbd399e57ca4287874446890289e669669c34be789a27875e7e2bd9f6f7_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00031.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 55,
                  "endLine": 34,
                  "snippet": {
                    "text": "        request.getSession().putValue(\"userid\", param);"
                  },
                  "startColumn": 9,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Mixing trusted and untrusted data within the same structure can lead to trust boundary violations, where unvalidated data is mistakenly trusted, potentially bypassing security mechanisms. Thoroughly sanitize user input before passing it into such function calls."
          },
          "properties": {},
          "ruleId": "java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "db95010993f8f6ce65f64f81564df5e405cf029446541540f6b66930451afe164bcc2a263ce800b3e1f94eddeb81f3fc33075063f7a5ecfcf21116bd0731d2c3_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00031.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 56,
                  "endLine": 34,
                  "snippet": {
                    "text": "        request.getSession().putValue(\"userid\", param);"
                  },
                  "startColumn": 9,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
          },
          "properties": {},
          "ruleId": "java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "8702538abc359518228150a5a526236a21818a343828b979df079de3b8c3b3dd40bba328e1937a3cfa5d76b12b3a393f1eb0e5d69db15e3d97f54a109a5643ba_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00031.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 54,
                  "endLine": 34,
                  "snippet": {
                    "text": "        request.getSession().putValue(\"userid\", param);"
                  },
                  "startColumn": 49,
                  "startLine": 34
                }
              }
            }
          ],
          "message": {
            "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
          },
          "properties": {},
          "ruleId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
        },
        {
          "fingerprints": {
            "matchBasedId/v1": "72fb91f5dcb3595e9c2bf341cc64e1bfa9a8af7e203d150df80b7326210be49d043135e9247e52c268d60ab1ad3b8d662930071d3beffd45a43cd13926f3b64a_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/content/OWASP DATASET CLEANED/cleaned_Test_Cases/BenchmarkTest00031.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 57,
                  "endLine": 40,
                  "snippet": {
                    "text": "        response.getWriter()\n                .println(\n                        \"Item: 'userid' with value: '\"\n                                + org.owasp.benchmark.helpers.Utils.encodeForHTML(param)\n                                + \"' saved in session.\");"
                  },
                  "startColumn": 9,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
          },
          "properties": {},
          "ruleId": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"
        }
      ],
      "tool": {
        "driver": {
          "name": "Semgrep OSS",
          "rules": [
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "helpUri": "https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request",
              "id": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request",
              "name": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-501: Trust Boundary Violation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
              },
              "help": {
                "markdown": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer)\n - [https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html](https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html)\n",
                "text": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views."
              },
              "helpUri": "https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "name": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A03:2021 - Injection",
                  "OWASP-A07:2017 - Cross-Site Scripting (XSS)",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer"
              }
            },
            {
              "defaultConfiguration": {
                "level": "note"
              },
              "fullDescription": {
                "text": "Mixing trusted and untrusted data within the same structure can lead to trust boundary violations, where unvalidated data is mistakenly trusted, potentially bypassing security mechanisms. Thoroughly sanitize user input before passing it into such function calls."
              },
              "help": {
                "markdown": "Mixing trusted and untrusted data within the same structure can lead to trust boundary violations, where unvalidated data is mistakenly trusted, potentially bypassing security mechanisms. Thoroughly sanitize user input before passing it into such function calls.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep)\n - [https://owasp.org/Top10/A04_2021-Insecure_Design](https://owasp.org/Top10/A04_2021-Insecure_Design)\n",
                "text": "Mixing trusted and untrusted data within the same structure can lead to trust boundary violations, where unvalidated data is mistakenly trusted, potentially bypassing security mechanisms. Thoroughly sanitize user input before passing it into such function calls."
              },
              "helpUri": "https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep",
              "id": "java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep",
              "name": "java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-501: Trust Boundary Violation",
                  "HIGH CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep"
              }
            },
            {
              "defaultConfiguration": {
                "level": "warning"
              },
              "fullDescription": {
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "help": {
                "markdown": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request)\n - [https://cwe.mitre.org/data/definitions/501.html](https://cwe.mitre.org/data/definitions/501.html)\n",
                "text": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls."
              },
              "helpUri": "https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request",
              "id": "java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request",
              "name": "java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-501: Trust Boundary Violation",
                  "MEDIUM CONFIDENCE",
                  "OWASP-A04:2021 - Insecure Design",
                  "security"
                ]
              },
              "shortDescription": {
                "text": "Semgrep Finding: java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request"
              }
            }
          ],
          "semanticVersion": "1.141.0"
        }
      }
    }
  ]
}